swagger: '2.0'
info:
  version: '1.0.0'
  title: 'Gamification Server'
  description: "A simple Gamification server for application developpers. It allows
  them to manage their gamification Application"
host: "localhost:8080"
basePath: "/api"
schemes:
  - "http"

paths:
  /badges:
    get:
      tags:
        - "badges"
      description: get the list of the application badges
      operationId: getBadges
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Badge'

    post:
      tags:
        - "badges"
      description: "Post a badge with an ID"
      operationId: 'createBadge'
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/badge'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: already exist
          schema:
            type: object


  /badges/{badgeName}:
    get:
      tags:
        - "badges"
      description: get the requested bage
      operationId: getBadge
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
        - $ref: '#/parameters/badgeName'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Badge'
        '404':
          description: bagde not found
          schema:
            type: object

    put:
      tags:
        - "badges"
      description: modify the "id" badge of the "id" app
      operationId: modifiyBadge
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/badge'
        - $ref: '#/parameters/badgeName'
        - $ref: '#/parameters/appKey'
      responses:
        '201':
          description: modified
          schema:
            type: object


  /pointScales:
    post:
      tags:
        - "pointscales"
      description: create a pointScale
      operationId: createPointScale
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/pointScale'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: already exist
          schema:
            type: object


  /pointScales/{pointScaleName}:
    get:
      tags:
        - "pointscales"
      description: return the pointScale wanted
      operationId: getPointScale
      parameters:
        - $ref: '#/parameters/pointScaleName'
        - $ref: '#/parameters/appKey'
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/PointScale'
        '404':
          description: user not found
          schema:
            type: object

    put:
      tags:
        - "pointscales"
      description: update a pointScale
      operationId: updatePointScale
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
        - $ref: '#/parameters/pointScaleName'
        - $ref: '#/parameters/pointScale'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: failed to update the pointScale
          schema:
            type: object

  /rules:
    get:
      tags:
        - "rules"
      description: get the list of the application rules
      operationId: getRules
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'

    post:
      tags:
        - "rules"
      description: create a rule for an app
      operationId: createRule
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/rule'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: already exist
          schema:
            type: object

    delete:
      tags:
        - "rules"
      description: delete a rule for an app
      operationId: deleteRule
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/rule'
      responses:
        '201':
          description: delete
          schema:
            type: object
        '400':
          description: already exist
          schema:
            type: object

  /rules/{ruleName}:
    get:
      tags:
        - "rules"
      description: get the wanted application rule
      operationId: getRule
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
        - $ref: '#/parameters/ruleName'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/Rule'

    put:
      tags:
        - "rules"
      description: update a rule for an app
      operationId: updateRule
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
        - $ref: '#/parameters/ruleName'
        - $ref: '#/parameters/rule'
      responses:
        '201':
          description: created
          schema:
            type: object
        '400':
          description: already exist
          schema:
            type: object

  /events:
    post:
      tags:
        - "events"
      description: send an event
      operationId: sendEvent
      consumes:
        - application/json
      parameters:
        - name: event
          in: body
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: modified
          schema:
            type: object

  /users:
    get:
      tags:
        - "users"
      description: get a users
      operationId: getUsers
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
      responses:
        '200':
          description: list of all users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

  /users/{username}:
    get:
      tags:
        - "users"
      description: get a users
      operationId: getUser
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/appKey'
        - $ref: '#/parameters/username'
      responses:
        '200':
          description: user returned
          schema:
            $ref: '#/definitions/User'

  /users/{username}/{pointScaleName}:
      get:
        tags:
          - "points"
        description: return the points the user have
        operationId: getPoints
        parameters:
          - $ref: '#/parameters/pointScaleName'
          - $ref: '#/parameters/appKey'
          - $ref: '#/parameters/username'
        produces:
          - application/json
        responses:
          '200':
            description: success
            schema:
              type: integer
          '404':
            description: user not found
            schema:
              type: object

parameters:
  badge:
    name: badge
    in: body
    required: true
    schema:
      $ref: '#/definitions/Badge'

  appKey:
    name: appKey
    in: header
    required: true
    type: integer

  badgeName:
    name: badgeName
    in: path
    required: true
    type: string

  username:
    name: username
    in: path
    required: true
    type: string

  pointScale:
    name: pointScale
    in: body
    required: true
    schema:
      $ref: '#/definitions/PointScale'

  pointScaleName:
    name: pointScaleName
    in: path
    required: true
    type: string

  rule:
    name: rule
    in: body
    required: true
    schema:
      $ref: '#/definitions/Rule'

  ruleName:
    name: ruleName
    in: path
    required: true
    type: string


definitions:
  Badge:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      appKey:
        type: integer
    required:
      - name
      - description
      - appKey

  PointScale:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      appKey:
        type: integer
    required:
      - name
      - description
      - appKey

  Rule:
    type: object
    properties:
      appKey:
        type: integer
      name:
        type: string
      eventType:
        type: string
      numberOfTimesToGetTheAward:
        type: integer
      description:
        type: string
      points:
        type: integer
      pointScale:
        $ref: '#/definitions/PointScale'
      badge:
        $ref: '#/definitions/Badge'
    required:
      - appKey
      - name
      - description
      - points
      - pointScale
      - badge

  Event:
    type: object
    properties:
      username:
        type: string
      timestamp:
        type: string
      eventType:
        type: string
      properties:
        type: array
        items:
          type: string
      appKey:
        type: integer

    required:
      - appKey
      - rules
      - username

  User:
    type: object
    properties:
      username:
        type: string
      appkey:
        type: integer
      pointScalesWithPoints:
        type: array
        items:
          $ref: '#/definitions/PointScaleWithPoints'
      badgesArray:
        type: array
        items:
          $ref: '#/definitions/Badge'
    required:
      - appKey
      - userId
      - pointScalesArray
      - pointScatesPoints
      - bagdesArray

  PointScaleWithPoints:
    type: object
    properties:
      pointScale:
        $ref : '#/definitions/PointScale'
      points:
        type: integer
    required:
      - pointScale
      - points

  Application:
    type: object
    properties:
      id:
        type: integer
      pointScales:
        type: array
        items:
          $ref: '#/definitions/PointScale'
      badges:
        type: array
        items:
          $ref: '#/definitions/Badge'
      rules:
        type: array
        items:
          $ref: '#/definitions/Rule'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      users:
        type: array
        items:
          $ref: '#/definitions/User'
    required:
      - id
      - pointScales
      - badges
      - rules
      - events
      - users
